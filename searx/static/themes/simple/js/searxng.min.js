/**
 * @license
 * (C) Copyright Contributors to the SearXNG project.
 * (C) Copyright Contributors to the searx project (2014 - 2021).
 * SPDX-License-Identifier: AGPL-3.0-or-later
 */
window.searxng = function(w, d) {
  if (w.Element) {
    (function(ElementPrototype) {
      ElementPrototype.matches = ElementPrototype.matches || ElementPrototype.matchesSelector || ElementPrototype.webkitMatchesSelector || ElementPrototype.msMatchesSelector || function(selector) {
        var node = this, nodes = (node.parentNode || node.document).querySelectorAll(selector), i = -1;
        while (nodes[++i] && nodes[i] != node) ;
        return !!nodes[i];
      };
    })(Element.prototype);
  }
  function callbackSafe(callback, el, e) {
    try {
      callback.call(el, e);
    } catch (exception) {
      console.log(exception);
    }
  }
  var searxng2 = window.searxng || {};
  searxng2.on = function(obj, eventType, callback, useCapture) {
    useCapture = useCapture || false;
    if (typeof obj !== "string") {
      obj.addEventListener(eventType, callback, useCapture);
    } else {
      d.addEventListener(eventType, function(e) {
        var el = e.target || e.srcElement, found = false;
        while (el && el.matches && el !== d && !(found = el.matches(obj))) el = el.parentElement;
        if (found) callbackSafe(callback, el, e);
      }, useCapture);
    }
  };
  searxng2.ready = function(callback) {
    if (document.readyState != "loading") {
      callback.call(w);
    } else {
      w.addEventListener("DOMContentLoaded", callback.bind(w));
    }
  };
  searxng2.http = function(method, url, data = null) {
    return new Promise(function(resolve, reject) {
      try {
        var req = new XMLHttpRequest();
        req.open(method, url, true);
        req.timeout = 2e4;
        req.onload = function() {
          if (req.status == 200) {
            resolve(req.response, req.responseType);
          } else {
            reject(Error(req.statusText));
          }
        };
        req.onerror = function() {
          reject(Error("Network Error"));
        };
        req.onabort = function() {
          reject(Error("Transaction is aborted"));
        };
        req.ontimeout = function() {
          reject(Error("Timeout"));
        };
        if (data) {
          req.send(data);
        } else {
          req.send();
        }
      } catch (ex) {
        reject(ex);
      }
    });
  };
  searxng2.loadStyle = function(src) {
    var path = searxng2.settings.theme_static_path + "/" + src, id = "style_" + src.replace(".", "_"), s = d.getElementById(id);
    if (s === null) {
      s = d.createElement("link");
      s.setAttribute("id", id);
      s.setAttribute("rel", "stylesheet");
      s.setAttribute("type", "text/css");
      s.setAttribute("href", path);
      d.body.appendChild(s);
    }
  };
  searxng2.loadScript = function(src, callback) {
    var path = searxng2.settings.theme_static_path + "/" + src, id = "script_" + src.replace(".", "_"), s = d.getElementById(id);
    if (s === null) {
      s = d.createElement("script");
      s.setAttribute("id", id);
      s.setAttribute("src", path);
      s.onload = callback;
      s.onerror = function() {
        s.setAttribute("error", "1");
      };
      d.body.appendChild(s);
    } else if (!s.hasAttribute("error")) {
      try {
        callback.apply(s, []);
      } catch (exception) {
        console.log(exception);
      }
    } else {
      console.log("callback not executed : script '" + path + "' not loaded.");
    }
  };
  searxng2.insertBefore = function(newNode, referenceNode) {
    referenceNode.parentNode.insertBefore(newNode, referenceNode);
  };
  searxng2.insertAfter = function(newNode, referenceNode) {
    referenceNode.parentNode.insertAfter(newNode, referenceNode.nextSibling);
  };
  searxng2.on(".close", "click", function() {
    this.parentNode.classList.add("invisible");
  });
  function getEndpoint() {
    for (var className of d.getElementsByTagName("body")[0].classList.values()) {
      if (className.endsWith("_endpoint")) {
        return className.split("_")[0];
      }
    }
    return "";
  }
  searxng2.endpoint = getEndpoint();
  return searxng2;
}(window, document);
searxng.ready(function() {
  searxng.infinite_scroll_supported = "IntersectionObserver" in window && "IntersectionObserverEntry" in window && "intersectionRatio" in window.IntersectionObserverEntry.prototype;
  if (searxng.endpoint !== "results") {
    return;
  }
  if (!searxng.infinite_scroll_supported) {
    console.log("IntersectionObserver not supported");
    return;
  }
  let d = document;
  var onlyImages = d.getElementById("results").classList.contains("only_template_images");
  function newLoadSpinner() {
    var loader = d.createElement("div");
    loader.classList.add("loader");
    return loader;
  }
  function replaceChildrenWith(element, children) {
    element.textContent = "";
    children.forEach((child) => element.appendChild(child));
  }
  function loadNextPage(callback) {
    var form = d.querySelector("#pagination form.next_page");
    if (!form) {
      return;
    }
    replaceChildrenWith(d.querySelector("#pagination"), [newLoadSpinner()]);
    var formData = new FormData(form);
    searxng.http("POST", d.querySelector("#search").getAttribute("action"), formData).then(
      function(response) {
        var nextPageDoc = new DOMParser().parseFromString(response, "text/html");
        var articleList = nextPageDoc.querySelectorAll("#urls article");
        var paginationElement = nextPageDoc.querySelector("#pagination");
        d.querySelector("#pagination").remove();
        if (articleList.length > 0 && !onlyImages) {
          d.querySelector("#urls").appendChild(d.createElement("hr"));
        }
        articleList.forEach((articleElement) => {
          d.querySelector("#urls").appendChild(articleElement);
        });
        if (paginationElement) {
          d.querySelector("#results").appendChild(paginationElement);
          callback();
        }
      }
    ).catch(
      function(err) {
        console.log(err);
        var e = d.createElement("div");
        e.textContent = searxng.settings.translations.error_loading_next_page;
        e.classList.add("dialog-error");
        e.setAttribute("role", "alert");
        replaceChildrenWith(d.querySelector("#pagination"), [e]);
      }
    );
  }
  if (searxng.settings.infinite_scroll && searxng.infinite_scroll_supported) {
    const intersectionObserveOptions = {
      rootMargin: "20rem"
    };
    const observedSelector = "article.result:last-child";
    const observer = new IntersectionObserver((entries) => {
      const paginationEntry = entries[0];
      if (paginationEntry.isIntersecting) {
        observer.unobserve(paginationEntry.target);
        loadNextPage(() => observer.observe(d.querySelector(observedSelector), intersectionObserveOptions));
      }
    });
    observer.observe(d.querySelector(observedSelector), intersectionObserveOptions);
  }
});
searxng.ready(function() {
  function isElementInDetail(el) {
    while (el !== void 0) {
      if (el.classList.contains("detail")) {
        return true;
      }
      if (el.classList.contains("result")) {
        return false;
      }
      el = el.parentNode;
    }
    return false;
  }
  function getResultElement(el) {
    while (el !== void 0) {
      if (el.classList.contains("result")) {
        return el;
      }
      el = el.parentNode;
    }
    return void 0;
  }
  function isImageResult(resultElement) {
    return resultElement && resultElement.classList.contains("result-images");
  }
  searxng.on(".result", "click", function(e) {
    if (!isElementInDetail(e.target)) {
      highlightResult(this)(true, true);
      let resultElement = getResultElement(e.target);
      if (isImageResult(resultElement)) {
        e.preventDefault();
        searxng.selectImage(resultElement);
      }
    }
  });
  searxng.on(".result a", "focus", function(e) {
    if (!isElementInDetail(e.target)) {
      let resultElement = getResultElement(e.target);
      if (resultElement && resultElement.getAttribute("data-vim-selected") === null) {
        highlightResult(resultElement)(true);
      }
      if (isImageResult(resultElement)) {
        searxng.selectImage(resultElement);
      }
    }
  }, true);
  var baseKeyBinding = {
    "Escape": {
      key: "ESC",
      fun: removeFocus,
      des: "remove focus from the focused input",
      cat: "Control"
    },
    "c": {
      key: "c",
      fun: copyURLToClipboard,
      des: "copy url of the selected result to the clipboard",
      cat: "Results"
    },
    "h": {
      key: "h",
      fun: toggleHelp,
      des: "toggle help window",
      cat: "Other"
    },
    "i": {
      key: "i",
      fun: searchInputFocus,
      des: "focus on the search input",
      cat: "Control"
    },
    "n": {
      key: "n",
      fun: GoToNextPage(),
      des: "go to next page",
      cat: "Results"
    },
    "o": {
      key: "o",
      fun: openResult(false),
      des: "open search result",
      cat: "Results"
    },
    "p": {
      key: "p",
      fun: GoToPreviousPage(),
      des: "go to previous page",
      cat: "Results"
    },
    "r": {
      key: "r",
      fun: reloadPage,
      des: "reload page from the server",
      cat: "Control"
    },
    "t": {
      key: "t",
      fun: openResult(true),
      des: "open the result in a new tab",
      cat: "Results"
    }
  };
  var keyBindingLayouts = {
    "default": Object.assign(
      {
        /* SearXNG layout */
        "ArrowLeft": {
          key: "←",
          fun: highlightResult("up"),
          des: "select previous search result",
          cat: "Results"
        },
        "ArrowRight": {
          key: "→",
          fun: highlightResult("down"),
          des: "select next search result",
          cat: "Results"
        }
      },
      baseKeyBinding
    ),
    "vim": Object.assign(
      {
        /* Vim-like Key Layout. */
        "b": {
          key: "b",
          fun: scrollPage(-window.innerHeight),
          des: "scroll one page up",
          cat: "Navigation"
        },
        "f": {
          key: "f",
          fun: scrollPage(window.innerHeight),
          des: "scroll one page down",
          cat: "Navigation"
        },
        "u": {
          key: "u",
          fun: scrollPage(-window.innerHeight / 2),
          des: "scroll half a page up",
          cat: "Navigation"
        },
        "d": {
          key: "d",
          fun: scrollPage(window.innerHeight / 2),
          des: "scroll half a page down",
          cat: "Navigation"
        },
        "g": {
          key: "g",
          fun: scrollPageTo(-document.body.scrollHeight, "top"),
          des: "scroll to the top of the page",
          cat: "Navigation"
        },
        "v": {
          key: "v",
          fun: scrollPageTo(document.body.scrollHeight, "bottom"),
          des: "scroll to the bottom of the page",
          cat: "Navigation"
        },
        "k": {
          key: "k",
          fun: highlightResult("up"),
          des: "select previous search result",
          cat: "Results"
        },
        "j": {
          key: "j",
          fun: highlightResult("down"),
          des: "select next search result",
          cat: "Results"
        },
        "y": {
          key: "y",
          fun: copyURLToClipboard,
          des: "copy url of the selected result to the clipboard",
          cat: "Results"
        }
      },
      baseKeyBinding
    )
  };
  var keyBindings = keyBindingLayouts[searxng.settings.hotkeys] || keyBindingLayouts.default;
  searxng.on(document, "keydown", function(e) {
    if (Object.prototype.hasOwnProperty.call(keyBindings, e.key) && !e.ctrlKey && !e.altKey && !e.shiftKey && !e.metaKey) {
      var tagName = e.target.tagName.toLowerCase();
      if (e.key === "Escape") {
        keyBindings[e.key].fun(e);
      } else {
        if (e.target === document.body || tagName === "a" || tagName === "button") {
          e.preventDefault();
          keyBindings[e.key].fun();
        }
      }
    }
  });
  function highlightResult(which) {
    return function(noScroll, keepFocus) {
      var current = document.querySelector(".result[data-vim-selected]"), effectiveWhich = which;
      if (current === null) {
        current = document.querySelector(".result");
        if (current === null) {
          return;
        }
        if (which === "down" || which === "up") {
          effectiveWhich = current;
        }
      }
      var next, results = document.querySelectorAll(".result");
      results = Array.from(results);
      if (typeof effectiveWhich !== "string") {
        next = effectiveWhich;
      } else {
        switch (effectiveWhich) {
          case "visible":
            var top = document.documentElement.scrollTop || document.body.scrollTop;
            var bot = top + document.documentElement.clientHeight;
            for (var i = 0; i < results.length; i++) {
              next = results[i];
              var etop = next.offsetTop;
              var ebot = etop + next.clientHeight;
              if (ebot <= bot && etop > top) {
                break;
              }
            }
            break;
          case "down":
            next = results[results.indexOf(current) + 1] || current;
            break;
          case "up":
            next = results[results.indexOf(current) - 1] || current;
            break;
          case "bottom":
            next = results[results.length - 1];
            break;
          case "top":
          /* falls through */
          default:
            next = results[0];
        }
      }
      if (next) {
        current.removeAttribute("data-vim-selected");
        next.setAttribute("data-vim-selected", "true");
        if (!keepFocus) {
          var link = next.querySelector("h3 a") || next.querySelector("a");
          if (link !== null) {
            link.focus();
          }
        }
        if (!noScroll) {
          scrollPageToSelected();
        }
      }
    };
  }
  function reloadPage() {
    document.location.reload(true);
  }
  function removeFocus(e) {
    const tagName = e.target.tagName.toLowerCase();
    if (document.activeElement && (tagName === "input" || tagName === "select" || tagName === "textarea")) {
      document.activeElement.blur();
    } else {
      searxng.closeDetail();
    }
  }
  function pageButtonClick(css_selector) {
    return function() {
      var button = document.querySelector(css_selector);
      if (button) {
        button.click();
      }
    };
  }
  function GoToNextPage() {
    return pageButtonClick('nav#pagination .next_page button[type="submit"]');
  }
  function GoToPreviousPage() {
    return pageButtonClick('nav#pagination .previous_page button[type="submit"]');
  }
  function scrollPageToSelected() {
    var sel = document.querySelector(".result[data-vim-selected]");
    if (sel === null) {
      return;
    }
    var wtop = document.documentElement.scrollTop || document.body.scrollTop, wheight = document.documentElement.clientHeight, etop = sel.offsetTop, ebot = etop + sel.clientHeight, offset = 120;
    if (sel.previousElementSibling === null && ebot < wheight) {
      window.scroll(window.scrollX, 0);
      return;
    }
    if (wtop > etop - offset) {
      window.scroll(window.scrollX, etop - offset);
    } else {
      var wbot = wtop + wheight;
      if (wbot < ebot + offset) {
        window.scroll(window.scrollX, ebot - wheight + offset);
      }
    }
  }
  function scrollPage(amount) {
    return function() {
      window.scrollBy(0, amount);
      highlightResult("visible")();
    };
  }
  function scrollPageTo(position, nav) {
    return function() {
      window.scrollTo(0, position);
      highlightResult(nav)();
    };
  }
  function searchInputFocus() {
    window.scrollTo(0, 0);
    var q = document.querySelector("#q");
    q.focus();
    if (q.setSelectionRange) {
      var len = q.value.length;
      q.setSelectionRange(len, len);
    }
  }
  function openResult(newTab) {
    return function() {
      var link = document.querySelector(".result[data-vim-selected] h3 a");
      if (link === null) {
        link = document.querySelector(".result[data-vim-selected] > a");
      }
      if (link !== null) {
        var url = link.getAttribute("href");
        if (newTab) {
          window.open(url);
        } else {
          window.location.href = url;
        }
      }
    };
  }
  function initHelpContent(divElement) {
    var categories = {};
    for (var k in keyBindings) {
      var key = keyBindings[k];
      categories[key.cat] = categories[key.cat] || [];
      categories[key.cat].push(key);
    }
    var sorted = Object.keys(categories).sort(function(a, b) {
      return categories[b].length - categories[a].length;
    });
    if (sorted.length === 0) {
      return;
    }
    var html = '<a href="#" class="close" aria-label="close" title="close">×</a>';
    html += "<h3>How to navigate SearXNG with hotkeys</h3>";
    html += "<table>";
    for (var i = 0; i < sorted.length; i++) {
      var cat = categories[sorted[i]];
      var lastCategory = i === sorted.length - 1;
      var first = i % 2 === 0;
      if (first) {
        html += "<tr>";
      }
      html += "<td>";
      html += "<h4>" + cat[0].cat + "</h4>";
      html += '<ul class="list-unstyled">';
      for (var cj in cat) {
        html += "<li><kbd>" + cat[cj].key + "</kbd> " + cat[cj].des + "</li>";
      }
      html += "</ul>";
      html += "</td>";
      if (!first || lastCategory) {
        html += "</tr>";
      }
    }
    html += "</table>";
    divElement.innerHTML = html;
  }
  function toggleHelp() {
    var helpPanel = document.querySelector("#vim-hotkeys-help");
    if (helpPanel === void 0 || helpPanel === null) {
      helpPanel = document.createElement("div");
      helpPanel.id = "vim-hotkeys-help";
      helpPanel.className = "dialog-modal";
      initHelpContent(helpPanel);
      var body = document.getElementsByTagName("body")[0];
      body.appendChild(helpPanel);
    } else {
      helpPanel.classList.toggle("invisible");
      return;
    }
  }
  function copyURLToClipboard() {
    var currentUrlElement = document.querySelector(".result[data-vim-selected] h3 a");
    if (currentUrlElement === null) return;
    const url = currentUrlElement.getAttribute("href");
    navigator.clipboard.writeText(url);
  }
  searxng.scrollPageToSelected = scrollPageToSelected;
  searxng.selectNext = highlightResult("down");
  searxng.selectPrevious = highlightResult("up");
});
(function(w, d, searxng2) {
  searxng2.ready(function() {
    searxng2.on(".searxng_init_map", "click", function(event) {
      this.classList.remove("searxng_init_map");
      var leaflet_target = this.dataset.leafletTarget;
      var map_lon = parseFloat(this.dataset.mapLon);
      var map_lat = parseFloat(this.dataset.mapLat);
      var map_zoom = parseFloat(this.dataset.mapZoom);
      var map_boundingbox = JSON.parse(this.dataset.mapBoundingbox);
      var map_geojson = JSON.parse(this.dataset.mapGeojson);
      searxng2.loadStyle("css/leaflet.css");
      searxng2.loadScript("js/leaflet.js", function() {
        var map_bounds = null;
        if (map_boundingbox) {
          var southWest = L.latLng(map_boundingbox[0], map_boundingbox[2]);
          var northEast = L.latLng(map_boundingbox[1], map_boundingbox[3]);
          map_bounds = L.latLngBounds(southWest, northEast);
        }
        var map = L.map(leaflet_target);
        var osmMapnikUrl = "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png";
        var osmMapnikAttrib = 'Map data © <a href="https://openstreetmap.org">OpenStreetMap</a> contributors';
        var osmMapnik = new L.TileLayer(osmMapnikUrl, { minZoom: 1, maxZoom: 19, attribution: osmMapnikAttrib });
        var osmWikimediaUrl = "https://maps.wikimedia.org/osm-intl/{z}/{x}/{y}.png";
        var osmWikimediaAttrib = 'Wikimedia maps | Maps data © <a href="https://openstreetmap.org">OpenStreetMap contributors</a>';
        var osmWikimedia = new L.TileLayer(osmWikimediaUrl, { minZoom: 1, maxZoom: 19, attribution: osmWikimediaAttrib });
        if (map_bounds) {
          setTimeout(function() {
            map.fitBounds(map_bounds, {
              maxZoom: 17
            });
          }, 0);
        } else if (map_lon && map_lat) {
          if (map_zoom) {
            map.setView(new L.latLng(map_lat, map_lon), map_zoom);
          } else {
            map.setView(new L.latLng(map_lat, map_lon), 8);
          }
        }
        map.addLayer(osmMapnik);
        var baseLayers = {
          "OSM Mapnik": osmMapnik,
          "OSM Wikimedia": osmWikimedia
        };
        L.control.layers(baseLayers).addTo(map);
        if (map_geojson) {
          L.geoJson(map_geojson).addTo(map);
        }
      });
      event.preventDefault();
    });
  });
})(window, document, window.searxng);
(function(w, d, searxng2) {
  if (searxng2.endpoint !== "preferences") {
    return;
  }
  searxng2.ready(function() {
    let engine_descriptions = null;
    function load_engine_descriptions() {
      if (engine_descriptions == null) {
        searxng2.http("GET", "engine_descriptions.json").then(function(content) {
          engine_descriptions = JSON.parse(content);
          for (const [engine_name, description] of Object.entries(engine_descriptions)) {
            let elements = d.querySelectorAll('[data-engine-name="' + engine_name + '"] .engine-description');
            for (const element of elements) {
              let source = " (<i>" + searxng2.settings.translations.Source + ":&nbsp;" + description[1] + "</i>)";
              element.innerHTML = description[0] + source;
            }
          }
        });
      }
    }
    for (const el of d.querySelectorAll("[data-engine-name]")) {
      searxng2.on(el, "mouseenter", load_engine_descriptions);
    }
    const enableAllEngines = d.querySelectorAll(".enable-all-engines");
    const disableAllEngines = d.querySelectorAll(".disable-all-engines");
    const engineToggles = d.querySelectorAll("tbody input[type=checkbox][class~=checkbox-onoff]");
    const toggleEngines = (enable) => {
      for (const el of engineToggles) {
        if (el.offsetParent !== null) el.checked = !enable;
      }
    };
    for (const el of enableAllEngines) {
      searxng2.on(el, "click", () => toggleEngines(true));
    }
    for (const el of disableAllEngines) {
      searxng2.on(el, "click", () => toggleEngines(false));
    }
    const copyHashButton = d.querySelector("#copy-hash");
    searxng2.on(copyHashButton, "click", (e) => {
      e.preventDefault();
      navigator.clipboard.writeText(copyHashButton.dataset.hash);
      copyHashButton.innerText = copyHashButton.dataset.copiedText;
    });
  });
})(window, document, window.searxng);
(function(w, d, searxng2) {
  if (searxng2.endpoint !== "results") {
    return;
  }
  searxng2.ready(function() {
    d.querySelectorAll("#urls img").forEach(
      (img) => img.addEventListener(
        "error",
        () => {
          img.src = window.searxng.settings.theme_static_path + "/img/img_load_error.svg";
        },
        { once: true }
      )
    );
    if (d.querySelector("#search_url button#copy_url")) {
      d.querySelector("#search_url button#copy_url").style.display = "block";
    }
    searxng2.on(".btn-collapse", "click", function() {
      var btnLabelCollapsed = this.getAttribute("data-btn-text-collapsed");
      var btnLabelNotCollapsed = this.getAttribute("data-btn-text-not-collapsed");
      var target = this.getAttribute("data-target");
      var targetElement = d.querySelector(target);
      var html = this.innerHTML;
      if (this.classList.contains("collapsed")) {
        html = html.replace(btnLabelCollapsed, btnLabelNotCollapsed);
      } else {
        html = html.replace(btnLabelNotCollapsed, btnLabelCollapsed);
      }
      this.innerHTML = html;
      this.classList.toggle("collapsed");
      targetElement.classList.toggle("invisible");
    });
    searxng2.on(".media-loader", "click", function() {
      var target = this.getAttribute("data-target");
      var iframe_load = d.querySelector(target + " > iframe");
      var srctest = iframe_load.getAttribute("src");
      if (srctest === null || srctest === void 0 || srctest === false) {
        iframe_load.setAttribute("src", iframe_load.getAttribute("data-src"));
      }
    });
    searxng2.on("#copy_url", "click", function() {
      var target = this.parentElement.querySelector("pre");
      navigator.clipboard.writeText(target.innerText);
      this.innerText = this.dataset.copiedText;
    });
    let imgTimeoutID;
    const imgLoaderSpinner = d.createElement("div");
    imgLoaderSpinner.classList.add("loader");
    const imgLoader = new Image();
    const loadImage = (imgSrc, onSuccess) => {
      if (imgTimeoutID) clearTimeout(imgTimeoutID);
      imgTimeoutID = setTimeout(() => {
        imgLoader.src = imgSrc;
      }, 1e3);
      imgLoader.onload = () => {
        onSuccess();
        imgLoaderSpinner.remove();
      };
      imgLoader.onerror = () => {
        imgLoaderSpinner.remove();
      };
    };
    searxng2.selectImage = (resultElement) => {
      d.getElementById("results").classList.add("image-detail-open");
      window.location.hash = "#image-viewer";
      searxng2.scrollPageToSelected();
      if (!resultElement) return;
      const img = resultElement.querySelector(".result-images-source img");
      if (!img) return;
      const src = img.getAttribute("data-src");
      if (!src) return;
      const thumbnail = resultElement.querySelector(".image_thumbnail");
      img.src = thumbnail.src;
      const detailElement = resultElement.querySelector(".detail");
      detailElement.appendChild(imgLoaderSpinner);
      loadImage(src, () => {
        img.src = src;
        img.removeAttribute("data-src");
      });
    };
    searxng2.closeDetail = function() {
      d.getElementById("results").classList.remove("image-detail-open");
      if (window.location.hash == "#image-viewer") window.history.back();
      searxng2.scrollPageToSelected();
    };
    searxng2.on(".result-detail-close", "click", (e) => {
      e.preventDefault();
      searxng2.closeDetail();
    });
    searxng2.on(".result-detail-previous", "click", (e) => {
      e.preventDefault();
      searxng2.selectPrevious(false);
    });
    searxng2.on(".result-detail-next", "click", (e) => {
      e.preventDefault();
      searxng2.selectNext(false);
    });
    window.addEventListener("hashchange", () => {
      if (window.location.hash != "#image-viewer") searxng2.closeDetail();
    });
    d.querySelectorAll(".swipe-horizontal").forEach(
      (obj) => {
        obj.addEventListener("swiped-left", function() {
          searxng2.selectNext(false);
        });
        obj.addEventListener("swiped-right", function() {
          searxng2.selectPrevious(false);
        });
      }
    );
    w.addEventListener("scroll", function() {
      var e = d.getElementById("backToTop"), scrollTop = document.documentElement.scrollTop || document.body.scrollTop, results = d.getElementById("results");
      if (e !== null) {
        if (scrollTop >= 100) {
          results.classList.add("scrolling");
        } else {
          results.classList.remove("scrolling");
        }
      }
    }, true);
  });
})(window, document, window.searxng);
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
function commonjsRequire(path) {
  throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var autocomplete = { exports: {} };
var hasRequiredAutocomplete;
function requireAutocomplete() {
  if (hasRequiredAutocomplete) return autocomplete.exports;
  hasRequiredAutocomplete = 1;
  (function(module, exports) {
    (function(f) {
      {
        module.exports = f();
      }
    })(function() {
      return (/* @__PURE__ */ function() {
        function r(e, n, t) {
          function o(i2, f) {
            if (!n[i2]) {
              if (!e[i2]) {
                var c = "function" == typeof commonjsRequire && commonjsRequire;
                if (!f && c) return c(i2, true);
                if (u) return u(i2, true);
                var a = new Error("Cannot find module '" + i2 + "'");
                throw a.code = "MODULE_NOT_FOUND", a;
              }
              var p = n[i2] = { exports: {} };
              e[i2][0].call(p.exports, function(r2) {
                var n2 = e[i2][1][r2];
                return o(n2 || r2);
              }, p, p.exports, r, e, n, t);
            }
            return n[i2].exports;
          }
          for (var u = "function" == typeof commonjsRequire && commonjsRequire, i = 0; i < t.length; i++) o(t[i]);
          return o;
        }
        return r;
      }())({ 1: [function(require2, module2, exports2) {
        var ConditionOperator;
        (function(ConditionOperator2) {
          ConditionOperator2[ConditionOperator2["AND"] = 0] = "AND";
          ConditionOperator2[ConditionOperator2["OR"] = 1] = "OR";
        })(ConditionOperator || (ConditionOperator = {}));
        var EventType;
        (function(EventType2) {
          EventType2[EventType2["KEYDOWN"] = 0] = "KEYDOWN";
          EventType2[EventType2["KEYUP"] = 1] = "KEYUP";
        })(EventType || (EventType = {}));
        var AutoComplete2 = (
          /** @class */
          function() {
            function AutoComplete3(params, selector) {
              if (params === void 0) {
                params = {};
              }
              if (selector === void 0) {
                selector = "[data-autocomplete]";
              }
              if (Array.isArray(selector)) {
                selector.forEach(function(s) {
                  new AutoComplete3(params, s);
                });
              } else if (typeof selector == "string") {
                var elements = document.querySelectorAll(selector);
                Array.prototype.forEach.call(elements, function(input) {
                  new AutoComplete3(params, input);
                });
              } else {
                var specificParams = AutoComplete3.merge(AutoComplete3.defaults, params, {
                  DOMResults: document.createElement("div")
                });
                AutoComplete3.prototype.create(specificParams, selector);
                return specificParams;
              }
            }
            AutoComplete3.prototype.create = function(params, element) {
              params.Input = element;
              if (params.Input.nodeName.match(/^INPUT$/i) && (params.Input.hasAttribute("type") === false || params.Input.getAttribute("type").match(/^TEXT|SEARCH$/i))) {
                params.Input.setAttribute("autocomplete", "off");
                params._Position(params);
                params.Input.parentNode.appendChild(params.DOMResults);
                params.$Listeners = {
                  blur: params._Blur.bind(params),
                  destroy: AutoComplete3.prototype.destroy.bind(null, params),
                  focus: params._Focus.bind(params),
                  keyup: AutoComplete3.prototype.event.bind(null, params, EventType.KEYUP),
                  keydown: AutoComplete3.prototype.event.bind(null, params, EventType.KEYDOWN),
                  position: params._Position.bind(params)
                };
                for (var event in params.$Listeners) {
                  params.Input.addEventListener(event, params.$Listeners[event]);
                }
              }
            };
            AutoComplete3.prototype.getEventsByType = function(params, type) {
              var mappings = {};
              for (var key in params.KeyboardMappings) {
                var event = EventType.KEYUP;
                if (params.KeyboardMappings[key].Event !== void 0) {
                  event = params.KeyboardMappings[key].Event;
                }
                if (event == type) {
                  mappings[key] = params.KeyboardMappings[key];
                }
              }
              return mappings;
            };
            AutoComplete3.prototype.event = function(params, type, event) {
              var eventIdentifier = function(condition) {
                if (match === true && mapping.Operator == ConditionOperator.AND || match === false && mapping.Operator == ConditionOperator.OR) {
                  condition = AutoComplete3.merge({
                    Not: false
                  }, condition);
                  if (condition.hasOwnProperty("Is")) {
                    if (condition.Is == event.keyCode) {
                      match = !condition.Not;
                    } else {
                      match = condition.Not;
                    }
                  } else if (condition.hasOwnProperty("From") && condition.hasOwnProperty("To")) {
                    if (event.keyCode >= condition.From && event.keyCode <= condition.To) {
                      match = !condition.Not;
                    } else {
                      match = condition.Not;
                    }
                  }
                }
              };
              for (var name in AutoComplete3.prototype.getEventsByType(params, type)) {
                var mapping = AutoComplete3.merge({
                  Operator: ConditionOperator.AND
                }, params.KeyboardMappings[name]), match = ConditionOperator.AND == mapping.Operator;
                mapping.Conditions.forEach(eventIdentifier);
                if (match === true) {
                  mapping.Callback.call(params, event);
                }
              }
            };
            AutoComplete3.prototype.makeRequest = function(params, callback, callbackErr) {
              var propertyHttpHeaders = Object.getOwnPropertyNames(params.HttpHeaders), request = new XMLHttpRequest(), method = params._HttpMethod(), url = params._Url(), queryParams = params._Pre(), queryParamsStringify = encodeURIComponent(params._QueryArg()) + "=" + encodeURIComponent(queryParams);
              if (method.match(/^GET$/i)) {
                if (url.indexOf("?") !== -1) {
                  url += "&" + queryParamsStringify;
                } else {
                  url += "?" + queryParamsStringify;
                }
              }
              request.open(method, url, true);
              for (var i = propertyHttpHeaders.length - 1; i >= 0; i--) {
                request.setRequestHeader(propertyHttpHeaders[i], params.HttpHeaders[propertyHttpHeaders[i]]);
              }
              request.onreadystatechange = function() {
                if (request.readyState == 4 && request.status == 200) {
                  params.$Cache[queryParams] = request.response;
                  callback(request.response);
                } else if (request.status >= 400) {
                  callbackErr();
                }
              };
              return request;
            };
            AutoComplete3.prototype.ajax = function(params, request, timeout) {
              if (timeout === void 0) {
                timeout = true;
              }
              if (params.$AjaxTimer) {
                window.clearTimeout(params.$AjaxTimer);
              }
              if (timeout === true) {
                params.$AjaxTimer = window.setTimeout(AutoComplete3.prototype.ajax.bind(null, params, request, false), params.Delay);
              } else {
                if (params.Request) {
                  params.Request.abort();
                }
                params.Request = request;
                params.Request.send(params._QueryArg() + "=" + params._Pre());
              }
            };
            AutoComplete3.prototype.cache = function(params, callback, callbackErr) {
              var response = params._Cache(params._Pre());
              if (response === void 0) {
                var request = AutoComplete3.prototype.makeRequest(params, callback, callbackErr);
                AutoComplete3.prototype.ajax(params, request);
              } else {
                callback(response);
              }
            };
            AutoComplete3.prototype.destroy = function(params) {
              for (var event in params.$Listeners) {
                params.Input.removeEventListener(event, params.$Listeners[event]);
              }
              params.DOMResults.parentNode.removeChild(params.DOMResults);
            };
            AutoComplete3.merge = function() {
              var merge = {}, tmp;
              for (var i = 0; i < arguments.length; i++) {
                for (tmp in arguments[i]) {
                  merge[tmp] = arguments[i][tmp];
                }
              }
              return merge;
            };
            AutoComplete3.defaults = {
              Delay: 150,
              EmptyMessage: "No result here",
              Highlight: {
                getRegex: function(value) {
                  return new RegExp(value, "ig");
                },
                transform: function(value) {
                  return "<strong>" + value + "</strong>";
                }
              },
              HttpHeaders: {
                "Content-type": "application/x-www-form-urlencoded"
              },
              Limit: 0,
              MinChars: 0,
              HttpMethod: "GET",
              QueryArg: "q",
              Url: null,
              KeyboardMappings: {
                "Enter": {
                  Conditions: [{
                    Is: 13,
                    Not: false
                  }],
                  Callback: function(event) {
                    if (this.DOMResults.getAttribute("class").indexOf("open") != -1) {
                      var liActive = this.DOMResults.querySelector("li.active");
                      if (liActive !== null) {
                        event.preventDefault();
                        this._Select(liActive);
                        this.DOMResults.setAttribute("class", "autocomplete");
                      }
                    }
                  },
                  Operator: ConditionOperator.AND,
                  Event: EventType.KEYDOWN
                },
                "KeyUpAndDown_down": {
                  Conditions: [
                    {
                      Is: 38,
                      Not: false
                    },
                    {
                      Is: 40,
                      Not: false
                    }
                  ],
                  Callback: function(event) {
                    event.preventDefault();
                  },
                  Operator: ConditionOperator.OR,
                  Event: EventType.KEYDOWN
                },
                "KeyUpAndDown_up": {
                  Conditions: [
                    {
                      Is: 38,
                      Not: false
                    },
                    {
                      Is: 40,
                      Not: false
                    }
                  ],
                  Callback: function(event) {
                    event.preventDefault();
                    var first = this.DOMResults.querySelector("li:first-child:not(.locked)"), last = this.DOMResults.querySelector("li:last-child:not(.locked)"), active = this.DOMResults.querySelector("li.active");
                    if (active) {
                      var currentIndex = Array.prototype.indexOf.call(active.parentNode.children, active), position = currentIndex + (event.keyCode - 39), lisCount = this.DOMResults.getElementsByTagName("li").length;
                      if (position < 0) {
                        position = lisCount - 1;
                      } else if (position >= lisCount) {
                        position = 0;
                      }
                      active.classList.remove("active");
                      active.parentElement.children.item(position).classList.add("active");
                    } else if (last && event.keyCode == 38) {
                      last.classList.add("active");
                    } else if (first) {
                      first.classList.add("active");
                    }
                  },
                  Operator: ConditionOperator.OR,
                  Event: EventType.KEYUP
                },
                "AlphaNum": {
                  Conditions: [{
                    Is: 13,
                    Not: true
                  }, {
                    From: 35,
                    To: 40,
                    Not: true
                  }],
                  Callback: function() {
                    var oldValue = this.Input.getAttribute("data-autocomplete-old-value"), currentValue = this._Pre();
                    if (currentValue !== "" && currentValue.length >= this._MinChars()) {
                      if (!oldValue || currentValue != oldValue) {
                        this.DOMResults.setAttribute("class", "autocomplete open");
                      }
                      AutoComplete3.prototype.cache(this, (function(response) {
                        this._Render(this._Post(response));
                        this._Open();
                      }).bind(this), this._Error);
                    } else {
                      this._Close();
                    }
                  },
                  Operator: ConditionOperator.AND,
                  Event: EventType.KEYUP
                }
              },
              DOMResults: null,
              Request: null,
              Input: null,
              /**
               * Return the message when no result returns
               */
              _EmptyMessage: function() {
                var emptyMessage = "";
                if (this.Input.hasAttribute("data-autocomplete-empty-message")) {
                  emptyMessage = this.Input.getAttribute("data-autocomplete-empty-message");
                } else if (this.EmptyMessage !== false) {
                  emptyMessage = this.EmptyMessage;
                } else {
                  emptyMessage = "";
                }
                return emptyMessage;
              },
              /**
               * Returns the maximum number of results
               */
              _Limit: function() {
                var limit = this.Input.getAttribute("data-autocomplete-limit");
                if (isNaN(limit) || limit === null) {
                  return this.Limit;
                }
                return parseInt(limit, 10);
              },
              /**
               * Returns the minimum number of characters entered before firing ajax
               */
              _MinChars: function() {
                var minchars = this.Input.getAttribute("data-autocomplete-minchars");
                if (isNaN(minchars) || minchars === null) {
                  return this.MinChars;
                }
                return parseInt(minchars, 10);
              },
              /**
               * Apply transformation on labels response
               */
              _Highlight: function(label) {
                return label.replace(this.Highlight.getRegex(this._Pre()), this.Highlight.transform);
              },
              /**
               * Returns the HHTP method to use
               */
              _HttpMethod: function() {
                if (this.Input.hasAttribute("data-autocomplete-method")) {
                  return this.Input.getAttribute("data-autocomplete-method");
                }
                return this.HttpMethod;
              },
              /**
               * Returns the query param to use
               */
              _QueryArg: function() {
                if (this.Input.hasAttribute("data-autocomplete-param-name")) {
                  return this.Input.getAttribute("data-autocomplete-param-name");
                }
                return this.QueryArg;
              },
              /**
               * Returns the URL to use for AJAX request
               */
              _Url: function() {
                if (this.Input.hasAttribute("data-autocomplete")) {
                  return this.Input.getAttribute("data-autocomplete");
                }
                return this.Url;
              },
              /**
               * Manage the close
               */
              _Blur: function(now) {
                if (now === void 0) {
                  now = false;
                }
                if (now) {
                  this._Close();
                } else {
                  var params = this;
                  setTimeout(function() {
                    params._Blur(true);
                  }, 150);
                }
              },
              /**
               * Manage the cache
               */
              _Cache: function(value) {
                return this.$Cache[value];
              },
              /**
               * Manage the open
               */
              _Focus: function() {
                var oldValue = this.Input.getAttribute("data-autocomplete-old-value");
                if ((!oldValue || this.Input.value != oldValue) && this._MinChars() <= this.Input.value.length) {
                  this.DOMResults.setAttribute("class", "autocomplete open");
                }
              },
              /**
               * Bind all results item if one result is opened
               */
              _Open: function() {
                var params = this;
                Array.prototype.forEach.call(this.DOMResults.getElementsByTagName("li"), function(li) {
                  if (li.getAttribute("class") != "locked") {
                    li.onclick = function() {
                      params._Select(li);
                    };
                  }
                });
              },
              _Close: function() {
                this.DOMResults.setAttribute("class", "autocomplete");
              },
              /**
               * Position the results HTML element
               */
              _Position: function() {
                this.DOMResults.setAttribute("class", "autocomplete");
                this.DOMResults.setAttribute("style", "top:" + (this.Input.offsetTop + this.Input.offsetHeight) + "px;left:" + this.Input.offsetLeft + "px;width:" + this.Input.clientWidth + "px;");
              },
              /**
               * Execute the render of results DOM element
               */
              _Render: function(response) {
                var ul;
                if (typeof response == "string") {
                  ul = this._RenderRaw(response);
                } else {
                  ul = this._RenderResponseItems(response);
                }
                if (this.DOMResults.hasChildNodes()) {
                  this.DOMResults.removeChild(this.DOMResults.childNodes[0]);
                }
                this.DOMResults.appendChild(ul);
              },
              /**
               * ResponseItems[] rendering
               */
              _RenderResponseItems: function(response) {
                var ul = document.createElement("ul"), li = document.createElement("li"), limit = this._Limit();
                if (limit < 0) {
                  response = response.reverse();
                } else if (limit === 0) {
                  limit = response.length;
                }
                for (var item = 0; item < Math.min(Math.abs(limit), response.length); item++) {
                  li.innerHTML = response[item].Label;
                  li.setAttribute("data-autocomplete-value", response[item].Value);
                  ul.appendChild(li);
                  li = document.createElement("li");
                }
                return ul;
              },
              /**
               * string response rendering (RAW HTML)
               */
              _RenderRaw: function(response) {
                var ul = document.createElement("ul"), li = document.createElement("li");
                if (response.length > 0) {
                  this.DOMResults.innerHTML = response;
                } else {
                  var emptyMessage = this._EmptyMessage();
                  if (emptyMessage !== "") {
                    li.innerHTML = emptyMessage;
                    li.setAttribute("class", "locked");
                    ul.appendChild(li);
                  }
                }
                return ul;
              },
              /**
               * Deal with request response
               */
              _Post: function(response) {
                try {
                  var returnResponse = [];
                  var json = JSON.parse(response);
                  if (Object.keys(json).length === 0) {
                    return "";
                  }
                  if (Array.isArray(json)) {
                    for (var i = 0; i < Object.keys(json).length; i++) {
                      returnResponse[returnResponse.length] = { "Value": json[i], "Label": this._Highlight(json[i]) };
                    }
                  } else {
                    for (var value in json) {
                      returnResponse.push({
                        "Value": value,
                        "Label": this._Highlight(json[value])
                      });
                    }
                  }
                  return returnResponse;
                } catch (event) {
                  return response;
                }
              },
              /**
               * Return the autocomplete value to send (before request)
               */
              _Pre: function() {
                return this.Input.value;
              },
              /**
               * Choice one result item
               */
              _Select: function(item) {
                if (item.hasAttribute("data-autocomplete-value")) {
                  this.Input.value = item.getAttribute("data-autocomplete-value");
                } else {
                  this.Input.value = item.innerHTML;
                }
                this.Input.setAttribute("data-autocomplete-old-value", this.Input.value);
              },
              /**
               * Handle HTTP error on the request
               */
              _Error: function() {
              },
              $AjaxTimer: null,
              $Cache: {},
              $Listeners: {}
            };
            return AutoComplete3;
          }()
        );
        module2.exports = AutoComplete2;
      }, {}] }, {}, [1])(1);
    });
  })(autocomplete);
  return autocomplete.exports;
}
var autocompleteExports = requireAutocomplete();
const AutoComplete = /* @__PURE__ */ getDefaultExportFromCjs(autocompleteExports);
(function(w, d, searxng2) {
  var qinput_id = "q", qinput;
  const isMobile = window.matchMedia("only screen and (max-width: 50em)").matches;
  function submitIfQuery() {
    if (qinput.value.length > 0) {
      var search = document.getElementById("search");
      setTimeout(search.submit.bind(search), 0);
    }
  }
  function createClearButton(qinput2) {
    var cs = document.getElementById("clear_search");
    var updateClearButton = function() {
      if (qinput2.value.length === 0) {
        cs.classList.add("empty");
      } else {
        cs.classList.remove("empty");
      }
    };
    updateClearButton();
    cs.addEventListener("click", function(ev) {
      qinput2.value = "";
      qinput2.focus();
      updateClearButton();
      ev.preventDefault();
    });
    qinput2.addEventListener("input", updateClearButton, false);
  }
  searxng2.ready(function() {
    qinput = d.getElementById(qinput_id);
    if (qinput !== null) {
      createClearButton(qinput);
      if (searxng2.settings.autocomplete) {
        searxng2.autocomplete = AutoComplete.call(w, {
          Url: "./autocompleter",
          EmptyMessage: searxng2.settings.translations.no_item_found,
          HttpMethod: searxng2.settings.method,
          HttpHeaders: {
            "Content-type": "application/x-www-form-urlencoded",
            "X-Requested-With": "XMLHttpRequest"
          },
          MinChars: searxng2.settings.autocomplete_min,
          Delay: 300,
          _Position: function() {
          },
          _Open: function() {
            var params = this;
            Array.prototype.forEach.call(this.DOMResults.getElementsByTagName("li"), function(li) {
              if (li.getAttribute("class") != "locked") {
                li.onmousedown = function() {
                  params._Select(li);
                };
              }
            });
          },
          _Select: function(item) {
            AutoComplete.defaults._Select.call(this, item);
            var form2 = item.closest("form");
            if (form2) {
              form2.submit();
            }
          },
          _MinChars: function() {
            if (this.Input.value.indexOf("!") > -1) {
              return 0;
            } else {
              return AutoComplete.defaults._MinChars.call(this);
            }
          },
          KeyboardMappings: Object.assign({}, AutoComplete.defaults.KeyboardMappings, {
            "KeyUpAndDown_up": Object.assign({}, AutoComplete.defaults.KeyboardMappings.KeyUpAndDown_up, {
              Callback: function(event) {
                AutoComplete.defaults.KeyboardMappings.KeyUpAndDown_up.Callback.call(this, event);
                var liActive = this.DOMResults.querySelector("li.active");
                if (liActive) {
                  AutoComplete.defaults._Select.call(this, liActive);
                }
              }
            }),
            "Tab": Object.assign({}, AutoComplete.defaults.KeyboardMappings.Enter, {
              Conditions: [{
                Is: 9,
                Not: false
              }],
              Callback: function(event) {
                if (this.DOMResults.getAttribute("class").indexOf("open") != -1) {
                  var liActive = this.DOMResults.querySelector("li.active");
                  if (liActive !== null) {
                    AutoComplete.defaults._Select.call(this, liActive);
                    event.preventDefault();
                  }
                }
              }
            })
          })
        }, "#" + qinput_id);
      }
      AutoComplete.prototype.ajax = function(params, request, timeout) {
        if (timeout === void 0) {
          timeout = true;
        }
        if (params.$AjaxTimer) {
          window.clearTimeout(params.$AjaxTimer);
        }
        if (timeout === true) {
          params.$AjaxTimer = window.setTimeout(AutoComplete.prototype.ajax.bind(null, params, request, false), params.Delay);
        } else {
          if (params.Request) {
            params.Request.abort();
          }
          params.Request = request;
          params.Request.send(encodeURIComponent(params._QueryArg()) + "=" + encodeURIComponent(params._Pre()));
        }
      };
      if (!isMobile && document.querySelector(".index_endpoint")) {
        qinput.focus();
      }
    }
    if (qinput !== null && searxng2.settings.search_on_category_select && d.querySelector(".search_filters") != null) {
      searxng2.on(d.getElementById("safesearch"), "change", submitIfQuery);
      searxng2.on(d.getElementById("time_range"), "change", submitIfQuery);
      searxng2.on(d.getElementById("language"), "change", submitIfQuery);
    }
    const categoryButtons = d.querySelectorAll("button.category_button");
    for (let button of categoryButtons) {
      searxng2.on(button, "click", (event) => {
        if (event.shiftKey) {
          event.preventDefault();
          button.classList.toggle("selected");
          return;
        }
        const selectedCategories = d.querySelectorAll("button.category_button.selected");
        for (let categoryButton of selectedCategories) {
          categoryButton.classList.remove("selected");
        }
        button.classList.add("selected");
      });
    }
    const form = d.querySelector("#search");
    if (form != null) {
      searxng2.on(form, "submit", (event) => {
        event.preventDefault();
        const categoryValuesInput = d.querySelector("#selected-categories");
        if (categoryValuesInput) {
          let categoryValues = [];
          for (let categoryButton of categoryButtons) {
            if (categoryButton.classList.contains("selected")) {
              categoryValues.push(categoryButton.name.replace("category_", ""));
            }
          }
          categoryValuesInput.value = categoryValues.join(",");
        }
        form.submit();
      });
    }
  });
})(window, document, window.searxng);
//# sourceMappingURL=searxng.min.js.map
